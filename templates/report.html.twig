{% extends "base.html.twig" %}

{% block title %}Report{% endblock %}

{% block body %}
    <h1 id="kmom01">Kmom01</h1>
    <p>Jag har haft tidigare erfarenheter utav objektorientering, så det är inget helt nytt så att säga.</p>
    <p>För att kunna komma igång med klasser och objekt i php så kan det vara bra om man vet vad en klass 
        är om inte, kolla upp det. Annars enkelt förklarat är det som en mall för att skapa objekt. Där definierar 
        klassen attribut och metoder som objekten till den klassen har.
    <p>Kodbasen, koden och strukturen till uppgiften är bra uppdelade i olika moduler. Det gör att koden får en bra
        struktur och blir lite enklare att följa.
    <p>Med tanke på artikeln så är det som jag fann lite extra intressant var kanske templating just nu. genom att 
        kolla på den översikligt.
    <p>TIl för detta kmom blir nog hur man kan använda klasser och routes i php.

    <h1 id="kmom02">Kmom02</h1>


    <p>Arv är så att klasser kan ärva egenskaper och metoder från andra klasser så att det går att återanvända och bygga på kod. Kompositionen är så att en klass kan innehålla objekt av andra klasser för att eventuellt kunna lösa större problem. Interface är något man som gör ett kontrakt för metoder som en klass kan implementera alltefter behov. Traits är återanvändbara kundsegment som kan inkluderas i olika klasser för att möjliggöra återanvändning av kod utan att ärva från en förälder.

    <p>Jag implementerade Cards på ett väldigt likt sätt som Dice i övningen. Men satte upp Card-klassen först, sen DeckOfCards och sen CardHand, jag känner mig nöjd med det som jag gjort ännu. Jag skulle gärna vilja försöka lägga till så att det bara är en kort bild som visas istället för hur jag löste det( kulören … värde ) eller om det var tvärtom.

    <p>Så Länge tycker jag att det är lite främmande men kommer in i det mer och mer är skönt på så sätt att det blir lätt bra strukturerat, eller känns så i alla fall. 

    <p>TIL för detta kmom blir hur man jobbar med klasser och arv mm i php.</p>


    <h1 id="kmom03">Kmom03</h1>

    <p>Att göra ett flödesdiagram hjälpte mig lite i tänkandet när jag väl började koda. När jag körde fast så kunde jag gå tillbaka och kolla på det för att få tillbaka tanken på hur simpelt det kan vara. Pseudo-koningen var inte till så mycket hjälp när jag väl hade kommit in, dock hjälpte det till lite med att sätta hjärnan i tankarna kring hur flödet skulle kunna vara.</p>

    <p>Jag löste den på liknande sätt som vi gjorde innan i kursen och med lite tankar från webapp kursen. Jag känner mig i helhet rätt så nöjd med hur detta blev. Det finns saker som kan förbättras helt klart och saker som skulle kunna läggas till. Förbättringspotential som jag skulle vilja se är att jag får kontroller klasserna till att vara ännu mer tomma, för just nu vet jag inte riktigt hur jag skulle lägga upp koden annorlunda.</p>

    <p>Känslan av Symfony just nu är lite krånglig ibland men i helhet bra.</p>

    <p>TIL för detta kmom blir att göra flödesdiagram för koden som ska göras kan underlätta senare när man kör fast, så man kan enklare komma tillbaka på rätt väg.</p>


    <h1 id="kmom04">Kmom04</h1>

    <p>Jag tyckte att det var kul och intressant att testa PHPUnit. Jag lyckades få till 100% kodtäckning på klasserna till spelet. Vissa delar av min kod tyckte jag var lättare att testa än andra, men i helheten var det rätt så smidigt. Det svåraste testet att få till och tog längre tid var card graphic tests. Jag ändrade inte någon del av min tidigare kod, förutom att kanske städa upp den lite.</p>
    <p>Jag tror precis som Mikael pratade om i videon till kmom:et är att försöka att inte ha allt för komplex kod, då ju mer komplex koden är ju svårare kommer det både vara att testa men också förstå.</p>
    <p>TIL för detta kmom blir att jag ska försöka ha så icke komplex bar kod som möjligt så att det kommer bli enklare att göra tester till den.</p>

    <h1 id="kmom05">Kmom05</h1>

    <p>Det gick hyfsat bra med övningen, hade lite problem när jag försökte göra library men var nog mest att jag glömde göra ett steg men det löste sig. När jag gjorde library tänkte jag att det skulle vara enkelt att komma in och se vad som finns och vad man kan göra. Det var smidigt och det gick snabbt att sätta upp så att Repository funka.
    <p>Jag tycker det kändes väldigt smidigt och hyfsat enkelt att att jobba med ORM i CRUD då man inte behöver tänka på tabeller utan mer på objektet. Min uppfattning än så länge är att genom att jobba med/genom ORM så kan jag få ner komplexiteten på koden när jag kodar och enklare lägga fokus på vad jag vill åstadkomma med koden. TIL för detta KMOM blir hur jag kan på ett enkelt sätt med symfony och doctrine sätta upp en databas och jobba mot den på ett simpelt sätt.

    <h1 id="kmom06">Kmom06</h1>

    <p>Jag tycker att verktyget Phpmetrics var i helhet bra på att få en övergripande bild av de olika klasserna. Jag tyckte det bästa med infon som man fick utav dem fanns med i deras overview, där man både fick en bra bild och info från Maintainability / complexity kolumn. Sen ClassRank kolumn fick man en bra uppsyn om vart maintain abilityn ligger i rank med viktigaste klassen.</p>
    <p>Det gick väldigt smidigt att sätta upp scrutinizer tar bara lite tid i början men blev en god kaffepaus. Sen när jag fick mitt första betyg så fick jag 9.85 med en coverage på 14% och att build hade blivit godkänd. Så visste inte direkt vart jag skulle försöka lägga fokus men sen såg jag att jag hade lite problem att ta tag i. Jag gjorde dem som jag kände att jag hade koll på, men den klagar på Kernel.php och .php-cs-fixer.dist.php men annars så gick det bra tills jag försökte lägga till tester till GameController och få upp dem till scrutinizer, men då klarade den inte av att bygga koden. Det jag förstod var att det scrutinizer failade med sin composer phpunit. Men fick upp till 9.9 och kände att jag inte kunde förbättra de tre andra kontrollerna som hade betyg B.</p>
    <p>På sätt och vis kan man få en överblick med bages men ibland känns det lite överdrivet. Jag tycker att det är bra om man försöker hålla sig till en standard när man kodar. Då tror jag att om man gör vissa småsaker. Såsom att dokumentera sin kod i vissa mån och försöka skriva icke komplex kod, kommer att hjälpa till att göra så att koden blir enklare att underhålla.</p>
    <p>TIL för detta kmom blir att jag ska försöka kontinuerligt göra koden mindre komplex och lämna hjälpande kommentarer.</p>

{% endblock %}